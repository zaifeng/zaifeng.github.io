<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 淡忘起初</title><link>https://iforget.top/post/</link><description>Recent content in Posts on 淡忘起初</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 04 Mar 2023 11:59:10 +0800</lastBuildDate><atom:link href="https://iforget.top/post/index.xml" rel="self" type="application/rss+xml"/><item><title>什么是死锁</title><link>https://iforget.top/post/dead-lock/</link><pubDate>Sat, 04 Mar 2023 11:59:10 +0800</pubDate><guid>https://iforget.top/post/dead-lock/</guid><description>什么是死锁 死锁一般发生在并发系统中，因资源争夺造成进程/线程之间的相互等待的一种现象，在没有外力的作用下会一直等待无法工作。 例如： 线程A 在获取 资源1 的情况下期望获取 资源2，线程B 在获取 资源2 的情况下期望获取资源1，这样线程A和B就处于了相互等待的状态。 死锁产生的四个必要条件 互斥条</description></item><item><title>Git Cherry Pick</title><link>https://iforget.top/post/git-cherry-pick/</link><pubDate>Mon, 20 Feb 2023 10:32:38 +0800</pubDate><guid>https://iforget.top/post/git-cherry-pick/</guid><description>git cherry-pick 教程 作者： 阮一峰 日期： 2020年4月27日 对于多分支的代码库，将代码从一个分支转移到另一个分支是常见需求。 这时分两种情况。一种情况是，你需要另一个分支的所有代码变动，那么就采用合并（git merge）。另一种情况是，你只需要部分代码变动（某几个提交），这时可以采用 Cherry pick。</description></item><item><title>Leetcode002</title><link>https://iforget.top/post/leetcode02/</link><pubDate>Tue, 14 Feb 2023 18:57:55 +0800</pubDate><guid>https://iforget.top/post/leetcode02/</guid><description>题目 给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。 请你将两个数相加，并以相同形式返回一个表示和的链表。 你可以假设除了数字 0 之外，这两个数都不会以 0 开头。 解答 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31</description></item><item><title>Mac开机启动项的管理</title><link>https://iforget.top/post/macstart/</link><pubDate>Thu, 02 Feb 2023 16:44:00 +0800</pubDate><guid>https://iforget.top/post/macstart/</guid><description>开机项的管理也是一个重要的部分，这里给出两种方法。 1、直接通过设置来管理 https://jingyan.baidu.com/article/73c3ce28dee1a1e50343d9f8.html 2、通过 plist 来管理 macOS 系统的启动项会以 .plist 的文件存在于以下目录中： /Library/LaunchDaemons：系统启动时运行，用户不登录也会运行。 /Library/LaunchAgents：用户登录后运行。 ~/</description></item><item><title>Golang实现Bitmap</title><link>https://iforget.top/post/bitmap/</link><pubDate>Tue, 08 Nov 2022 20:41:40 +0800</pubDate><guid>https://iforget.top/post/bitmap/</guid><description>BitMap介绍 BitMap可以理解为通过一个bit数组来存储特定数据的一种数据结构。BitMap常用于对大量整形数据做去重和查询。 在这类查找中，我们可以通过map数据结构进行查找。但如果数据量比较大map数据结构将会大量占用内存。 BitMap用一个比特位来映射某个元素的状态，所</description></item><item><title>Linux减号(-)用途</title><link>https://iforget.top/post/linuxcmd/</link><pubDate>Thu, 03 Nov 2022 11:24:57 +0800</pubDate><guid>https://iforget.top/post/linuxcmd/</guid><description>一个减号 目录说明： 1 2 3 4 5 $ tree . ├── a │ └── a.txt └── b 命令使用：将a目录文件，拷贝到b目录 1 $ tar -cvf - -C a/ .|tar -xf - -C b/ 命令解释： 第一个- 表示 Stdout -C a/ . 打包 a目录 文件，不包括目录a，注意 /与.之间的空格 第二个- 表示 Stdin -C b/解压到b目录 总结：- 代表标准输入 或 标准输出 两个减号 目录文件：</description></item><item><title>Git Stash</title><link>https://iforget.top/post/git-stash/</link><pubDate>Tue, 01 Nov 2022 21:16:07 +0800</pubDate><guid>https://iforget.top/post/git-stash/</guid><description>git stash用途 暂时搁置对工作副本所做的更改，以便处理其他事情 新建 1 2 3 4 # 添加stash $ git stash # 添加stash带备注 $ git stash 查看 1 2 3 4 5 6 7 8 # 查看stash列表 $ git stash list # 查看stash修改文件列表 $ git stash show stash@{num} # 查看stash修改详情 $ git stash show -p 应用 1 2 3 4 5 # 恢复stash $ git stash</description></item><item><title>Redis异常处理</title><link>https://iforget.top/post/redis-exception/</link><pubDate>Mon, 31 Oct 2022 11:14:53 +0800</pubDate><guid>https://iforget.top/post/redis-exception/</guid><description>在实际应用 Redis 过程中，将 Redis 作为数据库的缓存，经常会遇到这几个问题：缓存雪崩、缓存击穿、缓存穿透等。 缓存雪崩 缓存雪崩: 大量的应用无法在 Redis 缓存中处理，然后大量请求发送到了数据库，导致数据库的压力激增，甚至可能导致数据库崩溃，整个系统崩溃，引发雪崩一样的连锁效应。 故障原因： 缓存中大量 key 同</description></item><item><title>Dockerfile</title><link>https://iforget.top/post/dockerfile/</link><pubDate>Sun, 30 Oct 2022 23:01:21 +0800</pubDate><guid>https://iforget.top/post/dockerfile/</guid><description>什么是Dockerfile? Dockerfile是一个包含用于组合映像的命令的文本文档。可以使用在命令行中调用任何命令。 Docker通过读取Dockerfile中的指令自动生成映像。 docker build命令用于从Dockerfile构建映像。可以在docker build命令中使用-f标志</description></item><item><title>Docker 命名卷使用</title><link>https://iforget.top/post/docker-volumes/</link><pubDate>Fri, 28 Oct 2022 22:29:23 +0800</pubDate><guid>https://iforget.top/post/docker-volumes/</guid><description>在 Docker 中使用命名卷 容器被删除后，容器内的数据也跟随消失，如还想保留容器内数据，这里就用到了数据卷。 命名卷与匿名卷非常相似，不同之处在于可以使用其名称引用命名卷，更容易区分，便于维护。 创建命名卷 1 $ docker volume create &amp;lt;volume name&amp;gt; 例如，创建一个名为 notes-data 的卷，可以执行以下命令： 1 2 3 4 5 6 7 $ docker volume create notes-data # notes-data $ docker</description></item><item><title>Redis笔记</title><link>https://iforget.top/post/redis-notes/</link><pubDate>Thu, 27 Oct 2022 15:02:02 +0800</pubDate><guid>https://iforget.top/post/redis-notes/</guid><description>Redis过期删除策略 定期删除，每100ms随机抽取过期key删除 惰性删除，client端查询，redis发现过期，立即删除 内存淘汰策略， noeviction：返回错误，不会删除任何键值 allkeys-lru：使用LRU算法删除最近最少使用的键值 volatile-lru：使用LR</description></item><item><title>Golang代码调试</title><link>https://iforget.top/post/go-dlv-debug/</link><pubDate>Thu, 27 Oct 2022 13:50:37 +0800</pubDate><guid>https://iforget.top/post/go-dlv-debug/</guid><description>工欲善其事，必先利其器。 程序调试是每个合格的程序员必备的技能，是排查、定位、解决问题的必备技能之一 这里主要描述在vscode 环境下，如何配置dlv进行本地 or 远程调试 本地调试： 1 2 3 4 5 6 7 { &amp;#34;name&amp;#34;: &amp;#34;Local&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;go&amp;#34;, &amp;#34;request&amp;#34;: &amp;#34;launch&amp;#34;, &amp;#34;mode&amp;#34;: &amp;#34;auto&amp;#34;, &amp;#34;program&amp;#34;: &amp;#34;${fileDirname}&amp;#34;, } 远程调试： The Go extension has been communicating with Delve through a custom debug adapter program (legacy mode). As the new Delve&amp;rsquo;s native debug adapter implementation has become available (since Delve</description></item><item><title>Mac下vscode技巧</title><link>https://iforget.top/post/vscode-skill/</link><pubDate>Thu, 27 Oct 2022 13:35:46 +0800</pubDate><guid>https://iforget.top/post/vscode-skill/</guid><description>在MacOS环境下 批量修改变量名 选中要修改的变量名称，然后按cmd+shift+L 选中要修改的变量名称，然后按F2 先选中变量名，然后按cmd+d，依次选中下个变量名 Monterey 中仅第二种方法有效（可能与某软件热键冲突了） 批量注释 选中内容后按cmd+/，多行注释和取消多行注释 当光标放在某一行</description></item></channel></rss>